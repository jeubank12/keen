// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Toggle /> should render Toggle component 1`] = `
<Toggle>
  <styled.div
    isDisabled={false}
    onClick={[Function]}
  >
    <div
      className="sc-AxjAm bprqXP"
      onClick={[Function]}
    >
      <styled.div>
        <div
          className="sc-AxirZ gDIZwG"
        >
          <Styled(Component)
            animate="off"
            initial="off"
            transition={
              Object {
                "duration": 0.3,
                "ease": Array [
                  0.68,
                  -0.55,
                  0.27,
                  1.55,
                ],
              }
            }
            variants={
              Object {
                "off": Object {
                  "scaleX": 0,
                },
                "on": Object {
                  "scaleX": 1,
                },
              }
            }
          >
            <ForwardRef(MotionComponent)
              animate="off"
              className="sc-AxiKw gBECSS"
              initial="off"
              transition={
                Object {
                  "duration": 0.3,
                  "ease": Array [
                    0.68,
                    -0.55,
                    0.27,
                    1.55,
                  ],
                }
              }
              variants={
                Object {
                  "off": Object {
                    "scaleX": 0,
                  },
                  "on": Object {
                    "scaleX": 1,
                  },
                }
              }
            >
              <div
                className="sc-AxiKw gBECSS"
                style={
                  Object {
                    "transform": "scaleX(0) translateZ(0)",
                  }
                }
              />
              <Memo(MountComponent)
                innerRef={
                  Object {
                    "current": <div
                      class="sc-AxiKw gBECSS"
                      style="transform: scaleX(0) translateZ(0);"
                    />,
                  }
                }
                isStatic={false}
                values={
                  MotionValuesMap {
                    "hasMounted": true,
                    "onUpdate": undefined,
                    "output": [Function],
                    "unsubscribers": Map {
                      "scaleX" => [Function],
                    },
                    "values": Map {
                      "scaleX" => MotionValue {
                        "canTrackVelocity": true,
                        "current": 0,
                        "lastUpdated": 0,
                        "notifySubscriber": [Function],
                        "parent": undefined,
                        "prev": undefined,
                        "renderSubscribers": Set {
                          [Function],
                        },
                        "scheduleVelocityCheck": [Function],
                        "setChild": [Function],
                        "timeDelta": 0,
                        "transformer": undefined,
                        "updateAndNotify": [Function],
                        "updateSubscribers": Set {
                          [Function],
                        },
                        "velocityCheck": [Function],
                      },
                    },
                  }
                }
              />
              <Component
                animate="off"
                controls={
                  ValueAnimationControls {
                    "activeOverrides": Set {},
                    "baseTarget": Object {
                      "scaleX": 0,
                    },
                    "defaultTransition": Object {
                      "duration": 0.3,
                      "ease": Array [
                        0.68,
                        -0.55,
                        0.27,
                        1.55,
                      ],
                    },
                    "hasValue": [Function],
                    "isAnimating": Set {},
                    "makeTargetAnimatable": [Function],
                    "overrides": Array [],
                    "props": Object {
                      "animate": "off",
                      "className": "sc-AxiKw gBECSS",
                      "initial": "off",
                      "transition": Object {
                        "duration": 0.3,
                        "ease": Array [
                          0.68,
                          -0.55,
                          0.27,
                          1.55,
                        ],
                      },
                      "variants": Object {
                        "off": Object {
                          "scaleX": 0,
                        },
                        "on": Object {
                          "scaleX": 1,
                        },
                      },
                    },
                    "readValueFromSource": [Function],
                    "resolvedOverrides": Array [],
                    "values": MotionValuesMap {
                      "hasMounted": true,
                      "onUpdate": undefined,
                      "output": [Function],
                      "unsubscribers": Map {
                        "scaleX" => [Function],
                      },
                      "values": Map {
                        "scaleX" => MotionValue {
                          "canTrackVelocity": true,
                          "current": 0,
                          "lastUpdated": 0,
                          "notifySubscriber": [Function],
                          "parent": undefined,
                          "prev": undefined,
                          "renderSubscribers": Set {
                            [Function],
                          },
                          "scheduleVelocityCheck": [Function],
                          "setChild": [Function],
                          "timeDelta": 0,
                          "transformer": undefined,
                          "updateAndNotify": [Function],
                          "updateSubscribers": Set {
                            [Function],
                          },
                          "velocityCheck": [Function],
                        },
                      },
                    },
                    "variants": Object {
                      "off": Object {
                        "scaleX": 0,
                      },
                      "on": Object {
                        "scaleX": 1,
                      },
                    },
                  }
                }
                inherit={false}
                initial="off"
                key="animation"
                transition={
                  Object {
                    "duration": 0.3,
                    "ease": Array [
                      0.68,
                      -0.55,
                      0.27,
                      1.55,
                    ],
                  }
                }
                values={
                  MotionValuesMap {
                    "hasMounted": true,
                    "onUpdate": undefined,
                    "output": [Function],
                    "unsubscribers": Map {
                      "scaleX" => [Function],
                    },
                    "values": Map {
                      "scaleX" => MotionValue {
                        "canTrackVelocity": true,
                        "current": 0,
                        "lastUpdated": 0,
                        "notifySubscriber": [Function],
                        "parent": undefined,
                        "prev": undefined,
                        "renderSubscribers": Set {
                          [Function],
                        },
                        "scheduleVelocityCheck": [Function],
                        "setChild": [Function],
                        "timeDelta": 0,
                        "transformer": undefined,
                        "updateAndNotify": [Function],
                        "updateSubscribers": Set {
                          [Function],
                        },
                        "velocityCheck": [Function],
                      },
                    },
                  }
                }
                variants={
                  Object {
                    "off": Object {
                      "scaleX": 0,
                    },
                    "on": Object {
                      "scaleX": 1,
                    },
                  }
                }
              />
            </ForwardRef(MotionComponent)>
          </Styled(Component)>
        </div>
      </styled.div>
      <Styled(Component)
        animate="off"
        initial="off"
        transition={
          Object {
            "duration": 0.3,
            "type": "tween",
          }
        }
        variants={
          Object {
            "off": Object {
              "color": "#4F5B5F",
              "justifyContent": "flex-end",
            },
            "on": Object {
              "color": "#FFFFFF",
              "justifyContent": "flex-start",
            },
          }
        }
      >
        <ForwardRef(MotionComponent)
          animate="off"
          className="sc-AxhCb hoIqKA"
          initial="off"
          transition={
            Object {
              "duration": 0.3,
              "type": "tween",
            }
          }
          variants={
            Object {
              "off": Object {
                "color": "#4F5B5F",
                "justifyContent": "flex-end",
              },
              "on": Object {
                "color": "#FFFFFF",
                "justifyContent": "flex-start",
              },
            }
          }
        >
          <div
            className="sc-AxhCb hoIqKA"
            style={
              Object {
                "color": "#4F5B5F",
                "justifyContent": "flex-end",
              }
            }
          >
            off
          </div>
          <Memo(MountComponent)
            innerRef={
              Object {
                "current": <div
                  class="sc-AxhCb hoIqKA"
                  style="justify-content: flex-end; color: rgb(79, 91, 95);"
                >
                  off
                </div>,
              }
            }
            isStatic={false}
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "justifyContent" => [Function],
                  "color" => [Function],
                },
                "values": Map {
                  "justifyContent" => MotionValue {
                    "canTrackVelocity": false,
                    "current": "flex-end",
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                  "color" => MotionValue {
                    "canTrackVelocity": false,
                    "current": "#4F5B5F",
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
          />
          <Component
            animate="off"
            controls={
              ValueAnimationControls {
                "activeOverrides": Set {},
                "baseTarget": Object {
                  "color": "#4F5B5F",
                  "justifyContent": "flex-end",
                },
                "defaultTransition": Object {
                  "duration": 0.3,
                  "type": "tween",
                },
                "hasValue": [Function],
                "isAnimating": Set {},
                "makeTargetAnimatable": [Function],
                "overrides": Array [],
                "props": Object {
                  "animate": "off",
                  "children": "off",
                  "className": "sc-AxhCb hoIqKA",
                  "initial": "off",
                  "transition": Object {
                    "duration": 0.3,
                    "type": "tween",
                  },
                  "variants": Object {
                    "off": Object {
                      "color": "#4F5B5F",
                      "justifyContent": "flex-end",
                    },
                    "on": Object {
                      "color": "#FFFFFF",
                      "justifyContent": "flex-start",
                    },
                  },
                },
                "readValueFromSource": [Function],
                "resolvedOverrides": Array [],
                "values": MotionValuesMap {
                  "hasMounted": true,
                  "onUpdate": undefined,
                  "output": [Function],
                  "unsubscribers": Map {
                    "justifyContent" => [Function],
                    "color" => [Function],
                  },
                  "values": Map {
                    "justifyContent" => MotionValue {
                      "canTrackVelocity": false,
                      "current": "flex-end",
                      "lastUpdated": 0,
                      "notifySubscriber": [Function],
                      "parent": undefined,
                      "prev": undefined,
                      "renderSubscribers": Set {
                        [Function],
                      },
                      "scheduleVelocityCheck": [Function],
                      "setChild": [Function],
                      "timeDelta": 0,
                      "transformer": undefined,
                      "updateAndNotify": [Function],
                      "updateSubscribers": Set {
                        [Function],
                      },
                      "velocityCheck": [Function],
                    },
                    "color" => MotionValue {
                      "canTrackVelocity": false,
                      "current": "#4F5B5F",
                      "lastUpdated": 0,
                      "notifySubscriber": [Function],
                      "parent": undefined,
                      "prev": undefined,
                      "renderSubscribers": Set {
                        [Function],
                      },
                      "scheduleVelocityCheck": [Function],
                      "setChild": [Function],
                      "timeDelta": 0,
                      "transformer": undefined,
                      "updateAndNotify": [Function],
                      "updateSubscribers": Set {
                        [Function],
                      },
                      "velocityCheck": [Function],
                    },
                  },
                },
                "variants": Object {
                  "off": Object {
                    "color": "#4F5B5F",
                    "justifyContent": "flex-end",
                  },
                  "on": Object {
                    "color": "#FFFFFF",
                    "justifyContent": "flex-start",
                  },
                },
              }
            }
            inherit={false}
            initial="off"
            key="animation"
            transition={
              Object {
                "duration": 0.3,
                "type": "tween",
              }
            }
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "justifyContent" => [Function],
                  "color" => [Function],
                },
                "values": Map {
                  "justifyContent" => MotionValue {
                    "canTrackVelocity": false,
                    "current": "flex-end",
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                  "color" => MotionValue {
                    "canTrackVelocity": false,
                    "current": "#4F5B5F",
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
            variants={
              Object {
                "off": Object {
                  "color": "#4F5B5F",
                  "justifyContent": "flex-end",
                },
                "on": Object {
                  "color": "#FFFFFF",
                  "justifyContent": "flex-start",
                },
              }
            }
          />
        </ForwardRef(MotionComponent)>
      </Styled(Component)>
      <Styled(Component)
        animate="off"
        initial="off"
        transition={
          Object {
            "duration": 0.3,
            "ease": Array [
              0.68,
              -0.55,
              0.27,
              1.55,
            ],
          }
        }
        variants={
          Object {
            "off": Object {
              "x": 0,
            },
            "on": Object {
              "x": 38,
            },
          }
        }
      >
        <ForwardRef(MotionComponent)
          animate="off"
          className="sc-AxhUy gXjZGV"
          initial="off"
          transition={
            Object {
              "duration": 0.3,
              "ease": Array [
                0.68,
                -0.55,
                0.27,
                1.55,
              ],
            }
          }
          variants={
            Object {
              "off": Object {
                "x": 0,
              },
              "on": Object {
                "x": 38,
              },
            }
          }
        >
          <div
            className="sc-AxhUy gXjZGV"
            style={
              Object {
                "transform": "none",
              }
            }
          />
          <Memo(MountComponent)
            innerRef={
              Object {
                "current": <div
                  class="sc-AxhUy gXjZGV"
                  style="transform: none;"
                />,
              }
            }
            isStatic={false}
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "x" => [Function],
                },
                "values": Map {
                  "x" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
          />
          <Component
            animate="off"
            controls={
              ValueAnimationControls {
                "activeOverrides": Set {},
                "baseTarget": Object {
                  "x": 0,
                },
                "defaultTransition": Object {
                  "duration": 0.3,
                  "ease": Array [
                    0.68,
                    -0.55,
                    0.27,
                    1.55,
                  ],
                },
                "hasValue": [Function],
                "isAnimating": Set {},
                "makeTargetAnimatable": [Function],
                "overrides": Array [],
                "props": Object {
                  "animate": "off",
                  "className": "sc-AxhUy gXjZGV",
                  "initial": "off",
                  "transition": Object {
                    "duration": 0.3,
                    "ease": Array [
                      0.68,
                      -0.55,
                      0.27,
                      1.55,
                    ],
                  },
                  "variants": Object {
                    "off": Object {
                      "x": 0,
                    },
                    "on": Object {
                      "x": 38,
                    },
                  },
                },
                "readValueFromSource": [Function],
                "resolvedOverrides": Array [],
                "values": MotionValuesMap {
                  "hasMounted": true,
                  "onUpdate": undefined,
                  "output": [Function],
                  "unsubscribers": Map {
                    "x" => [Function],
                  },
                  "values": Map {
                    "x" => MotionValue {
                      "canTrackVelocity": true,
                      "current": 0,
                      "lastUpdated": 0,
                      "notifySubscriber": [Function],
                      "parent": undefined,
                      "prev": undefined,
                      "renderSubscribers": Set {
                        [Function],
                      },
                      "scheduleVelocityCheck": [Function],
                      "setChild": [Function],
                      "timeDelta": 0,
                      "transformer": undefined,
                      "updateAndNotify": [Function],
                      "updateSubscribers": Set {
                        [Function],
                      },
                      "velocityCheck": [Function],
                    },
                  },
                },
                "variants": Object {
                  "off": Object {
                    "x": 0,
                  },
                  "on": Object {
                    "x": 38,
                  },
                },
              }
            }
            inherit={false}
            initial="off"
            key="animation"
            transition={
              Object {
                "duration": 0.3,
                "ease": Array [
                  0.68,
                  -0.55,
                  0.27,
                  1.55,
                ],
              }
            }
            values={
              MotionValuesMap {
                "hasMounted": true,
                "onUpdate": undefined,
                "output": [Function],
                "unsubscribers": Map {
                  "x" => [Function],
                },
                "values": Map {
                  "x" => MotionValue {
                    "canTrackVelocity": true,
                    "current": 0,
                    "lastUpdated": 0,
                    "notifySubscriber": [Function],
                    "parent": undefined,
                    "prev": undefined,
                    "renderSubscribers": Set {
                      [Function],
                    },
                    "scheduleVelocityCheck": [Function],
                    "setChild": [Function],
                    "timeDelta": 0,
                    "transformer": undefined,
                    "updateAndNotify": [Function],
                    "updateSubscribers": Set {
                      [Function],
                    },
                    "velocityCheck": [Function],
                  },
                },
              }
            }
            variants={
              Object {
                "off": Object {
                  "x": 0,
                },
                "on": Object {
                  "x": 38,
                },
              }
            }
          />
        </ForwardRef(MotionComponent)>
      </Styled(Component)>
    </div>
  </styled.div>
</Toggle>
`;
